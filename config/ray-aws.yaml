# An unique identifier for the head node and workers of this cluster.
cluster_name: mw

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 6

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 3

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
autoscaling_mode: default

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "" # e.g., tensorflow/tensorflow:1.5.0-py3
    container_name: "" # e.g. ray_docker
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options: []  # Extra options to pass into "docker run"

    # Example of running a GPU head with CPU workers
    # head_image: "tensorflow/tensorflow:1.13.1-py3"
    # head_run_options:
    #     - --runtime=nvidia

    # worker_image: "ubuntu:18.04"
    # worker_run_options: []

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This value must be less than 1.0 for scaling to happen.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-west-2
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes are currently spread between zones by a round-robin approach,
    # however this implementation detail should not be relied upon.
    availability_zone: us-west-2a,us-west-2b

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
    InstanceType: m5.2xlarge
    ImageId: ami-0a7d051a1c4b54f65 # us-west-2
    # ami-05931d11d2bf831c3 # Deep Learning AMI (Ubuntu) Version 24.3

    # You can provision additional disk space with a conf as follows
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 64

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
    InstanceType: t2.large
    ImageId: ami-0a7d051a1c4b54f65 # us-west-2
    # ami-05931d11d2bf831c3 # Deep Learning AMI (Ubuntu) Version 24.3

    # Run workers on spot by default. Comment this out to use on-demand.
    InstanceMarketOptions:
        MarketType: spot
#        Additional options can be found in the boto docs, e.g.
#            SpotOptions:
#                MaxPrice: 0.15

    # Additional options in the boto docs.

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands:
 - mkdir -p $HOME/bin
 - test -e $HOME/miniconda.sh || curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh > $HOME/miniconda.sh
 - test -e $HOME/bin/miniconda || bash $HOME/miniconda.sh -b -p $HOME/bin/miniconda
 - DEBIAN_FRONTEND=noninteractive sudo -E bash -c 'pkill -9 apt-get' || true
 - DEBIAN_FRONTEND=noninteractive sudo -E bash -c 'pkill -9 dpkg' || true
 - DEBIAN_FRONTEND=noninteractive sudo -E bash -c 'while ! dpkg --configure -a; do sleep 1 ; done'
 - DEBIAN_FRONTEND=noninteractive sudo -E bash -c 'while ! apt-get update; do sleep 1 ; done'
 - DEBIAN_FRONTEND=noninteractive sudo -E bash -c 'while ! apt install -y gcc; do sleep 1 ; done'
#  - curl -fsSL https://get.docker.com -o get-docker.sh | sudo sh
#  - getent group docker 2>&1 > /dev/null' || sudo groupadd docker
#  - sudo usermod -aG docker ubuntu
#  - exec sudo su -l ubuntu

# List of shell commands to run to set up nodes.
setup_commands:
 - export PATH="$HOME/bin/miniconda/bin:$PATH"
 - grep 'export PATH="$HOME/bin/miniconda/bin:$PATH"' ~/.bashrc || echo 'export PATH="$HOME/bin/miniconda/bin:$PATH"' >> ~/.bashrc
 - conda init >/dev/null
 - grep 'conda init >/dev/null' ~/.bashrc || echo 'conda init >/dev/null' >> ~/.bashrc
 - test -e mw-repo || (git clone https://github.com/vlad17/mw.git && mv mw mw-repo)
 - mkdir -p mw-repo/data
 - cd mw-repo && git checkout master && git pull
 - cd mw-repo && conda env update -f environment.yaml --prune
 - conda activate mw-env
 - grep 'conda activate mw-env' ~/.bashrc || echo 'conda activate mw-env' >> ~/.bashrc
 - cd mw-repo && pip install --upgrade --force-reinstall .

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --head --redis-port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --redis-address=$RAY_HEAD_IP:6379 --object-manager-port=8076